#include <iostream>
#include <vector>
#include <fstream>
#include <queue>
using namespace std;

//Условие

// Кодирование Хаффмана относится к префиксному кодированию,
// позволяющему минимизировать длину текста за счёт того, 
// что различные символы кодируются различным числом бит.

// Напомним процесс построения кода. Вначале строится дерево Хаффмана.
// Пусть исходный алфавит состоит из n символов, i-й из которых встречается pi раз
// во входном тексте. Изначально все символы считаются активными вершинами будущего дерева,
// i-я вершина помечена значением pi. На каждом шаге мы берём две активных вершины с
// наименьшими метками, создаём новую вершину, помечая её суммой меток этих вершин,
// и делаем её их родителем. Эта вершина становится активной, а двое её сыновей из 
// списка активных удаляются. Этот процесс многократно повторяется, пока не останется 
// только одна активная вершина, и она считается корнем дерева.

// Заметим, что символы алфавита представлены листьями этого дерева.
// Для каждого листа длина его кода в кодировании Хаффмана равна длине пути от корня до него.
// Сам код строится следующим образом: для каждой внутренней вершины рассмотрим две дуги,
// идущие от неё к сыновьям. Одной из дуг присвоим метку 0, другой — 1. Код каждого символа
// — последовательность из нулей и единиц на пути от корня к листу, представляющему символ.

// Задача состоит в том, чтобы вычислить длину текста после его кодирования методом Хаффмана.
// Поскольку длина кода зависит только от частоты появления символов, то сам текст не дан,
// известно лишь, сколько раз каждый символ встречается в тексте.

int main() {
  ifstream input("huffman.in");
  int n, p;
  priority_queue<long long> q;
  if (input) {
    input >> n;
    for (int i = 0; i < n; i++) {
      input >> p;
      q.push(-p);
    }
  }

  long long sum = 0;
  long long a, b;
  while (q.size() != 1) {
    a = -q.top();
    q.pop();
    b = -q.top();
    q.pop();
    sum += (a + b);
    q.push(-a + -b);
  }

  ofstream output("huffman.out");
  if (output)
    output << sum;
  return 0;
}